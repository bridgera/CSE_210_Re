// Eric Carter, a possible implementation for GoalTrackerusing System;using System.Threading;namespace GoalTracker{    public class Program    {        private static List<Goal> _goals = new List<Goal>();        private static void Main()        {            bool exit = false;            while (!exit)            {                DisplayGoalsAndScore();                Console.WriteLine(@"Menu Options: 1. Create New Goal2. List Goals3. Save Goals4. Load Goals5. Record Event6. QuitSelect a choice from the menu: ");                int choice = Program.SafeParse();                Console.WriteLine();                switch (choice)                {                    case 1:                        CreateGoal();                        break;                    case 2:                        DisplayGoalsAndScore();                        break;                    case 3:                        SaveGoals();                        break;                    case 4:                        LoadGoals();                        break;                    case 5:                        RecordEvent();                        break;                    case 6:                        exit = true;                        break;                    default:                        Console.WriteLine("Invalid choice. Please try again.");                        break;                }            }        }        private static void CreateGoal()        {            Console.WriteLine(@"The types of goals are:1. Simple Goal2. Eternal Goal3. Checklist GoalEnter your choice: ");            int choice = SafeParse();            switch (choice)            {                case 1:                    _goals.Add(new SimpleGoal());                    break;                case 2:                    _goals.Add(new EternalGoal());                    break;                case 3:                    _goals.Add(new ChecklistGoal());                    break;                default:                    Console.WriteLine("Invalid choice. Goal creation cancelled.");                    break;            }        }        public static bool AreThereGoalsToRecordEventsFor()        {            foreach (Goal goal in _goals)            {                if (!goal.IsComplete())                    return true;            }            return false;        }        public static int DisplayGoalsThatAreNotYetCompleteAndReturnMaxIndex()        {            int index = 1;            foreach (Goal goal in _goals)            {                if (!goal.IsComplete())                    Console.WriteLine($"{index++}. {goal.GetName()}");            }            return index - 1;        }        public static Goal GetGoalToCompleteFromOneBasedIndex(int indexToSelect)        {            int index = 1;            foreach (Goal goal in _goals)            {                if (!goal.IsComplete())                {                    if (index == indexToSelect)                        return goal;                    index++;                }            }            return null;        }        private static void RecordEvent()        {            if (!AreThereGoalsToRecordEventsFor())            {                Console.WriteLine("There are no goals available to record events for.");                return;            }            int choice = 0;            int maxIndex = -1;            while (choice <= 0 || choice > maxIndex)            {                Console.WriteLine("The goals available to complete are:");                maxIndex = DisplayGoalsThatAreNotYetCompleteAndReturnMaxIndex();                Console.WriteLine("Which goal did you accomplish? ");                choice = SafeParse();            }            Goal theGoalToComplete = GetGoalToCompleteFromOneBasedIndex(choice);            System.Diagnostics.Debug.Assert(theGoalToComplete != null);            theGoalToComplete.Complete();        }        private static void DisplayGoalsAndScore()        {            Console.Clear();            int score = 0;            if (_goals.Count > 0)            {                Console.WriteLine("The goals are:");                foreach (Goal goal in _goals)                {                    Console.WriteLine(goal.GetCompleteDisplayString());                    score += goal.GetPointsEarned();                }            }            else            {                Console.WriteLine("No goals have been created or loaded yet.");            }            Console.WriteLine();            Console.WriteLine($"You have {score} points.");            Console.WriteLine();        }        private static void SaveGoals()        {            Console.Write("Enter Filename to save to: ");            string filename = Console.ReadLine();            using (StreamWriter writer = new StreamWriter(filename))            {                foreach (Goal goal in _goals)                {                    writer.WriteLine(goal.GetType().FullName); // C# type system can output Namespace.ClassName, so will output GoalTracker.EternalGoal, GoalTracker.SimpleGoal, or GoalTracker.ChecklistGoal                    goal.WriteToStreamWriter(writer);                }            }        }        private static void LoadGoals()        {           Console.Write("Enter filename to load from: ");           string filename = Console.ReadLine();           _goals.Clear();           using (StreamReader reader = new StreamReader(filename))           {                while (!reader.EndOfStream)                {                    string typeLine = reader.ReadLine();                     switch (typeLine)                    {                        case "GoalTracker.SimpleGoal":                            _goals.Add(new SimpleGoal(reader));                            break;                        case "GoalTracker.ChecklistGoal":                            _goals.Add(new ChecklistGoal(reader));                            break;                        case "GoalTracker.EternalGoal":                            _goals.Add(new EternalGoal(reader));                            break;                        default:                            new Exception("Unknown type found in file");                            break;                    }                }           }        }        public static int SafeParse()         {            int result = 0;            try            {                result = int.Parse(Console.ReadLine());                            }            catch (System.FormatException)            {                return 0; // Since int.Parse throws System.FormatException if it reads non number, force to 0 if non number.            }            catch (Exception)            {                throw; // rethrow all other non System.FormatException so this doesn't swallow other things it shouldn't.            }                        return result;        }    }}

// Eric Carter, a possible implementation for GoalTrackerusing System;using System.Collections.Generic;namespace GoalTracker{    public abstract class Goal    {        private string _name = "";        private string _shortDescription = "";        protected bool _isCompleted = false;        protected int _pointsForEachCompletion = 0;        protected int _pointsEarned = 0;        public Goal()        {            Console.WriteLine($"What is the name of your {GetFriendlyGoalTypeName()}? ");            _name = Console.ReadLine();            Console.WriteLine($"What is a short description of your {GetFriendlyGoalTypeName()}? ");            _shortDescription = Console.ReadLine();            Console.WriteLine($"Enter the points awarded for {GetFriendlyCompleteActionDescription()}? ");            _pointsForEachCompletion = Program.SafeParse();        }        public Goal(StreamReader read)        {            _name = read.ReadLine();            _shortDescription = read.ReadLine();            _pointsForEachCompletion = int.Parse(read.ReadLine());            _isCompleted = bool.Parse(read.ReadLine());            _pointsEarned = int.Parse(read.ReadLine());        }        public int GetPointsEarned()        {            return _pointsEarned;        }        public string GetName()        {            return _name;        }        public bool IsComplete()        {            return _isCompleted;        }        protected string CompletedCheckbox()        {            return _isCompleted ? "[X]" : "[ ]";        }        public virtual string GetCompleteDisplayString() // is virtual because at least one class may need to override this        {            return $"{CompletedCheckbox()} {_name} ({_shortDescription})";        }        public abstract void Complete();        protected abstract string GetFriendlyGoalTypeName();        protected abstract string GetFriendlyCompleteActionDescription();        public virtual void WriteToStreamWriter(StreamWriter w)        {            w.WriteLine(_name);            w.WriteLine(_shortDescription);            w.WriteLine(_pointsForEachCompletion);            w.WriteLine(_isCompleted);            w.WriteLine(_pointsEarned);        }    }}
    
    
      Expand (76 lines)
      Collapse
    
  
  

  
  
  
    
      
        SimpleGoal.cs
      
      
        C#
      
    
    
    
      // Eric Carter, a possible implementation for GoalTrackernamespace GoalTracker {    // Simple goal class    public class SimpleGoal : Goal    {        public SimpleGoal() : base()        {        }        public SimpleGoal(StreamReader read) : base(read)        {        }        public override void Complete()        {            if (!_isCompleted)            {                _isCompleted = true;                _pointsEarned += _pointsForEachCompletion;            }        }        protected override string GetFriendlyCompleteActionDescription()        {            return "completion";        }        protected override string GetFriendlyGoalTypeName()        {            return "one-time goal";        }                }}

      // Eric Carter, a possible implementation for GoalTrackernamespace GoalTracker {    public class EternalGoal : Goal     {        public EternalGoal() : base()        {        }        public EternalGoal(StreamReader read) : base(read)        {        }        public override void Complete()        {            _isCompleted = false; // doesn't have to be here but reminds that this goal never completes            _pointsEarned += _pointsForEachCompletion;        }        protected override string GetFriendlyCompleteActionDescription()        {            return "each time this habit is repeated";        }        protected override string GetFriendlyGoalTypeName()        {            return "eternal habit";        }    }}
      // Eric Carter, a possible implementation for GoalTrackernamespace GoalTracker{    public class ChecklistGoal : Goal    {        private int _numberOfTimesToComplete = 0;        private int _numberOfTimesCheckedOff = 0;        private int _completionBonus = 0;        public ChecklistGoal() : base()        {            Console.WriteLine("Enter how many times must the checklist goal be completed for a onus? ");            _numberOfTimesToComplete = Program.SafeParse();            Console.WriteLine($"What is the bonus point reward once it is completed {_numberOfTimesToComplete} times? ");            _completionBonus = Program.SafeParse();        }        public ChecklistGoal(StreamReader read) : base(read)        {            _numberOfTimesToComplete = int.Parse(read.ReadLine());            _numberOfTimesCheckedOff = int.Parse(read.ReadLine());            _completionBonus = int.Parse(read.ReadLine());        }                public override void Complete()        {            if (!_isCompleted)            {                _numberOfTimesCheckedOff++;                _pointsEarned += _pointsForEachCompletion;                if (_numberOfTimesCheckedOff == _numberOfTimesToComplete)                {                    _isCompleted = true;                    _pointsEarned += _completionBonus;                }            }        }        protected override string GetFriendlyCompleteActionDescription()        {            return "each time you accomplish this goal";        }        protected override string GetFriendlyGoalTypeName()        {            return "checklist goal";        }        public override string GetCompleteDisplayString() // spoiler--we marked this virtual in the base class becuase Checklist goal needs to override it.        {            return $"{base.GetCompleteDisplayString()} {GetProgressStatus()}";  // base does what we want, call it then add progress status for hecklist goal..        }        private string GetProgressStatus()        {            return $"Completed {_numberOfTimesCheckedOff}/{_numberOfTimesToComplete} times.";        }        public override void WriteToStreamWriter(StreamWriter w)        {            base.WriteToStreamWriter(w);            w.WriteLine(_numberOfTimesToComplete);            w.WriteLine(_numberOfTimesCheckedOff);            w.WriteLine(_completionBonus);        }       }}
